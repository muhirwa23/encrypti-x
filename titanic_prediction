{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2965537,"sourceType":"datasetVersion","datasetId":1818188}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-06T09:56:19.410253Z","iopub.execute_input":"2024-08-06T09:56:19.410752Z","iopub.status.idle":"2024-08-06T09:56:19.432246Z","shell.execute_reply.started":"2024-08-06T09:56:19.410712Z","shell.execute_reply":"2024-08-06T09:56:19.430501Z"},"trusted":true},"execution_count":261,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic-dataset/Titanic-Dataset.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\ntitanic_data = pd.read_csv(\"/kaggle/input/titanic-dataset/Titanic-Dataset.csv\")\n\n# Fill missing Age values with the median without triggering a warning\ntitanic_data['Age'] = titanic_data['Age'].fillna(titanic_data['Age'].median())\n\n# Drop the Cabin column due to excessive missing values\ntitanic_data.drop(['Cabin'], axis=1, inplace=True)\n\n# Drop rows with missing values in the Embarked column\ntitanic_data.dropna(subset=['Embarked'], inplace=True)\n\n# One-hot encode categorical features\ntitanic_data = pd.get_dummies(titanic_data, columns=['Sex', 'Embarked'], drop_first=True)\n\n# Define features and target variable\nfeatures = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex_male', 'Embarked_Q', 'Embarked_S']\nX = titanic_data[features]\ny = titanic_data['Survived']\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Use SimpleImputer to fill any remaining missing values (if necessary)\nimputer = SimpleImputer(strategy='median')\nX_train = imputer.fit_transform(X_train)\nX_test = imputer.transform(X_test)  # Apply the same transformation to the test set\n\n# Scale the features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Initialize and fit the logistic regression model with increased max_iter\nmodel = LogisticRegression(max_iter=200)  # Increase max_iter to 200\nmodel.fit(X_train, y_train)\n\n# Output a message confirming the model has been fitted\nprint(\"Logistic Regression model fitted successfully.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-06T09:56:19.434517Z","iopub.execute_input":"2024-08-06T09:56:19.434990Z","iopub.status.idle":"2024-08-06T09:56:19.481297Z","shell.execute_reply.started":"2024-08-06T09:56:19.434933Z","shell.execute_reply":"2024-08-06T09:56:19.479949Z"},"trusted":true},"execution_count":262,"outputs":[{"name":"stdout","text":"Logistic Regression model fitted successfully.\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report, accuracy_score\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.2f}\")\n\n# Print classification report for precision, recall, and F1-score\nprint(classification_report(y_test, y_pred))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-06T09:56:19.482938Z","iopub.execute_input":"2024-08-06T09:56:19.483318Z","iopub.status.idle":"2024-08-06T09:56:19.504447Z","shell.execute_reply.started":"2024-08-06T09:56:19.483288Z","shell.execute_reply":"2024-08-06T09:56:19.502803Z"},"trusted":true},"execution_count":263,"outputs":[{"name":"stdout","text":"Accuracy: 0.77\n              precision    recall  f1-score   support\n\n           0       0.84      0.77      0.80       109\n           1       0.68      0.77      0.72        69\n\n    accuracy                           0.77       178\n   macro avg       0.76      0.77      0.76       178\nweighted avg       0.78      0.77      0.77       178\n\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# Plot confusion matrix\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Survived', 'Survived'], yticklabels=['Not Survived', 'Survived'])\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-06T09:56:19.506110Z","iopub.execute_input":"2024-08-06T09:56:19.506802Z","iopub.status.idle":"2024-08-06T09:56:19.815941Z","shell.execute_reply.started":"2024-08-06T09:56:19.506762Z","shell.execute_reply":"2024-08-06T09:56:19.814536Z"},"trusted":true},"execution_count":264,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]}]}